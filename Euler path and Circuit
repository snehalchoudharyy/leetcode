class Solution {
  public:
    void dfs(int node,vector<int> adj[],vector<int> &vis){
        vis[node]=1;
        for(auto adjNode:adj[node]){
            if(!vis[adjNode]){
                dfs(adjNode,adj,vis);
            }
        }
    }
    bool isConnected(int V,vector<int> adj[]){
        int nonZeroDegree=-1;
        for(int i=0;i<V;i++){
            if(adj[i].size()!=0){
                nonZeroDegree=i;
                break;
            }
        }
        if (nonZeroDegree == -1) return true;
        vector<int> vis(V,0);
        dfs(nonZeroDegree,adj,vis);
        //check if all non zero degree node are visited
        for(int i=0;i<V;i++){
            if(vis[i]==0&&adj[i].size()!=0){
                return false;
            }
        }
        return true;
    }
    
    int isEulerCircuit(int V, vector<int> adj[]) {
        // Code here
        //check if all non zero degree are connected or not
        if(isConnected(V,adj)==false){
            return 0;
        }
        //check for odd degree count vertices
        int oddDegreeCount=0;
        for(int i=0;i<V;i++){
            if(adj[i].size()%2==1) oddDegreeCount++;
        }
        if(oddDegreeCount>2) return 0;
        if(oddDegreeCount==2) return 1;
        if(oddDegreeCount==0) return 2;
        
        return 0;
        
        
    }
};
