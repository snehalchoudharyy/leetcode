class Solution {
  public:
    // Function to detect cycle using DSU in an undirected graph.
    vector<int> parent;
    vector<int> rank;
    int find (int x){
        if(x==parent[x]){
            return x;
        }
        return parent[x]=find(parent[x]);
    }
    void unionFind(int x,int y){
        int x_parent=parent[x];
        int y_parent=parent[y];
        
        if(x_parent==y_parent) return;
        if(rank[x_parent]>rank[y_parent]){
            parent[y_parent]=x_parent;
        }
        else if(rank[x_parent]<rank[y_parent]){
            parent[x_parent]=y_parent;
        }
        else{
            parent[x_parent]=y_parent;
            rank[y_parent]++;
        } 
    }
    int detectCycle(int V, vector<int> adj[]) {
        // Code here
        parent.resize(V);
        rank.resize(V);
        for(int i=0;i<V;i++){
            parent[i]=i;
            rank[i]=1;
        }
        for(int u=0;u<V;u++){
            for(auto v:adj[u]){
                if(u<v){
                    int parent_u=find(u);
                    int parent_v=find(v);
                    if(parent_u==parent_v) return 1;
                    unionFind(u,v);
                }
            }
        }
        return 0;
    }
};
