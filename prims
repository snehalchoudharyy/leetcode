class Solution {
  public:
    int spanningTree(int V, vector<vector<int>>& edges) {
        // code here
        vector<int> parent(V,-1);
        vector<int> inMst(V,0);
        vector<vector<pair<int,int>>> adj(V);
        for(auto &e:edges){
            adj[e[0]].push_back({e[1],e[2]});
            adj[e[1]].push_back({e[0],e[2]});
        }
        int sum=0;
        using T=tuple<int,int,int>;
        priority_queue<T,vector<T>,greater<T>> pq;
        pq.push({0,0,-1});
        while(!pq.empty()){
            auto [wt,node,par]=pq.top();
            pq.pop();
            if(inMst[node]) continue;
            parent[node]=par;
            inMst[node]=1;
            sum=sum+wt;
            for(auto nbr:adj[node]){
                int nextNode=nbr.first;
                int nxtWt=nbr.second;
                if(inMst[nextNode]==0){
                    pq.push({nxtWt,nextNode,node});
                }
            }
        }
        return sum;
        
        
        
    }
};
