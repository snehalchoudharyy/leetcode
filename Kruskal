class Solution {
  public:
    vector<int> parent;
    vector<int> rank;
  
    int find(int x){
        if(x==parent[x]){
            return x;
        }
        return parent[x]=find(parent[x]);
    } 
    void unionFind(int x,int y){
        int x_parent=find(x);
        int y_parent=find(y);
        if(x_parent==y_parent) return;
        if(rank[x_parent]>rank[y_parent]){
            parent[y_parent]=x_parent;
        }
        else if(rank[y_parent]>rank[x_parent]){
            parent[x_parent]=y_parent;
        }
        else{
            parent[x_parent]=y_parent;
            rank[y_parent]++;
        }
    }
    
    int Kruskal(vector<vector<int>> &edges){
        int sum=0;
        for(auto &edge:edges){
            int u=edge[0];
            int v=edge[1];
            int wt=edge[2];
            
            int parent_u=find(u);
            int parent_v=find(v);
            if(parent_u!=parent_v){
                unionFind(u,v);
                sum=sum+wt;
            }
        }
        return sum;
    }
  
    int spanningTree(int V, vector<vector<int>>& edges) {
        // code here
        parent.resize(V);
        for(int i=0;i<V;i++){
            parent[i]=i;
        }
        rank.resize(V,0);
        
        sort(edges.begin(),edges.end(),[&](vector<int> &a,vector<int> &b){
            return a[2]<b[2];
        });
        
        return Kruskal(edges);
        
        
        
        
        
    }
};
